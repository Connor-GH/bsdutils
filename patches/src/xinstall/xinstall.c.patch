--- xinstall.c.orig	2020-06-29 12:42:43.625119517 -0400
+++ xinstall.c	2020-06-29 13:39:30.574601160 -0400
@@ -34,6 +34,7 @@
 #include <sys/wait.h>
 #include <sys/mman.h>
 #include <sys/stat.h>
+#include <sys/auxv.h>
 
 #include <ctype.h>
 #include <err.h>
@@ -51,10 +52,11 @@
 
 #include "pathnames.h"
 
+#include "compat.h"
+
 #define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
 
 #define	DIRECTORY	0x01		/* Tell install it's a directory. */
-#define	SETFLAGS	0x02		/* Tell install to set flags. */
 #define	USEFSYNC	0x04		/* Tell install to use fsync(2). */
 #define NOCHANGEBITS	(UF_IMMUTABLE | UF_APPEND | SF_IMMUTABLE | SF_APPEND)
 #define BACKUP_SUFFIX	".old"
@@ -84,11 +86,11 @@
 	u_int32_t fset;
 	u_int iflags;
 	int ch, no_target;
-	char *flags, *to_name, *group = NULL, *owner = NULL;
+	char *to_name, *group = NULL, *owner = NULL;
 	const char *errstr;
 
 	iflags = 0;
-	while ((ch = getopt(argc, argv, "B:bCcDdFf:g:m:o:pSs")) != -1)
+	while ((ch = getopt(argc, argv, "B:bCcDdFg:m:o:pSs")) != -1)
 		switch(ch) {
 		case 'C':
 			docompare = 1;
@@ -105,12 +107,6 @@
 		case 'F':
 			iflags |= USEFSYNC;
 			break;
-		case 'f':
-			flags = optarg;
-			if (strtofflags(&flags, &fset, NULL))
-				errx(1, "%s: invalid flag", flags);
-			iflags |= SETFLAGS;
-			break;
 		case 'g':
 			group = optarg;
 			break;
@@ -155,12 +151,12 @@
 
 	/* get group and owner id's */
 	if (group != NULL && gid_from_group(group, &gid) == -1) {
-		gid = strtonum(group, 0, GID_MAX, &errstr);
+		gid = strtonum(group, 0, INT_MAX, &errstr);
 		if (errstr != NULL)
 			errx(1, "unknown group %s", group);
 	}
 	if (owner != NULL && uid_from_user(owner, &uid) == -1) {
-		uid = strtonum(owner, 0, UID_MAX, &errstr);
+		uid = strtonum(owner, 0, INT_MAX, &errstr);
 		if (errstr != NULL)
 			errx(1, "unknown user %s", owner);
 	}
@@ -199,8 +195,10 @@
 	if (!no_target) {
 		if (stat(*argv, &from_sb))
 			err(1, "%s", *argv);
-		if (!S_ISREG(to_sb.st_mode))
-			errc(1, EFTYPE, "%s", to_name);
+		if (!S_ISREG(to_sb.st_mode)) {
+			errno = EINVAL;
+			err(1, "%s", to_name);
+		}
 		if (to_sb.st_dev == from_sb.st_dev &&
 		    to_sb.st_ino == from_sb.st_ino)
 			errx(1, "%s and %s are the same file", *argv, to_name);
@@ -230,8 +228,10 @@
 	if (flags & DIRECTORY || strcmp(from_name, _PATH_DEVNULL)) {
 		if (stat(from_name, &from_sb))
 			err(1, "%s", from_name);
-		if (!S_ISREG(from_sb.st_mode))
-			errc(1, EFTYPE, "%s", from_name);
+		if (!S_ISREG(from_sb.st_mode)) {
+			errno = EINVAL;
+			err(1, "%s", from_name);
+		}
 		/* Build the target path. */
 		if (flags & DIRECTORY) {
 			(void)snprintf(pathbuf, sizeof(pathbuf), "%s/%s",
@@ -248,7 +248,8 @@
 		/* Only compare against regular files. */
 		if (docompare && !S_ISREG(to_sb.st_mode)) {
 			docompare = 0;
-			warnc(EFTYPE, "%s", to_name);
+			errno = EINVAL;
+			warn("%s", to_name);
 		}
 	} else if (docompare) {
 		/* File does not exist so silently ignore compare flag. */
@@ -294,7 +295,8 @@
 		if (fstat(temp_fd, &temp_sb)) {
 			serrno = errno;
 			(void)unlink(tempfile);
-			errc(1, serrno, "%s", tempfile);
+			errno = serrno;
+			err(1, "%s", tempfile);
 		}
 
 		if (compare(temp_fd, tempfile, temp_sb.st_size, to_fd,
@@ -348,16 +350,6 @@
 		errx(1, "%s: chmod: %s", target_name, strerror(serrno));
 	}
 
-	/*
-	 * If provided a set of flags, set them, otherwise, preserve the
-	 * flags, except for the dump flag.
-	 */
-	if (fchflags(to_fd,
-	    flags & SETFLAGS ? fset : from_sb.st_flags & ~UF_NODUMP)) {
-		if (errno != EOPNOTSUPP || (from_sb.st_flags & ~UF_NODUMP) != 0)
-			warnx("%s: chflags: %s", target_name, strerror(errno));
-	}
-
 	if (flags & USEFSYNC)
 		fsync(to_fd);
 	(void)close(to_fd);
@@ -369,9 +361,6 @@
 	 * or were not compared.
 	 */
 	if (!files_match) {
-		/* Try to turn off the immutable bits. */
-		if (to_sb.st_flags & (NOCHANGEBITS))
-			(void)chflags(to_name, to_sb.st_flags & ~(NOCHANGEBITS));
 		if (dobackup) {
 			char backup[PATH_MAX];
 			(void)snprintf(backup, PATH_MAX, "%s%s", to_name,
@@ -426,7 +415,8 @@
 		    from_fd, (off_t)0)) == MAP_FAILED) {
 			serrno = errno;
 			(void)unlink(to_name);
-			errc(1, serrno, "%s", from_name);
+			errno = serrno;
+			err(1, "%s", from_name);
 		}
 		madvise(p, size, MADV_SEQUENTIAL);
 		siz = (size_t)size;
@@ -468,7 +458,8 @@
 		if (nr != 0) {
 			serrno = errno;
 			(void)unlink(to_name);
-			errc(1, serrno, "%s", from_name);
+			errno = serrno;
+			err(1, "%s", from_name);
 		}
 	}
 }
@@ -537,14 +528,15 @@
 	char * volatile path_strip;
 	pid_t pid;
 
-	if (issetugid() || (path_strip = getenv("STRIP")) == NULL)
+	if (getauxval(AT_SECURE) || (path_strip = getenv("STRIP")) == NULL)
 		path_strip = _PATH_STRIP;
 
 	switch ((pid = vfork())) {
 	case -1:
 		serrno = errno;
 		(void)unlink(to_name);
-		errc(1, serrno, "forks");
+		errno = serrno;
+		err(1, "forks");
 	case 0:
 		execl(path_strip, "strip", "--", to_name, (char *)NULL);
 		warn("%s", path_strip);
@@ -578,13 +570,14 @@
 				int mkdir_errno = errno;
 				if (stat(path, &sb)) {
 					/* Not there; use mkdir()s errno */
-					errc(1, mkdir_errno, "%s",
-					    path);
+					errno = mkdir_errno;
+					err(1, "%s", path);
 					/* NOTREACHED */
 				}
 				if (!S_ISDIR(sb.st_mode)) {
 					/* Is there, but isn't a directory */
-					errc(1, ENOTDIR, "%s", path);
+					errno = ENOTDIR;
+					err(1, "%s", path);
 					/* NOTREACHED */
 				}
 			}
