--- rm.c.orig	2020-06-27 17:37:25.927824793 -0400
+++ rm.c	2020-06-27 17:51:29.064966438 -0400
@@ -33,6 +33,8 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/mount.h>
+#include <sys/statvfs.h>
+#include <sys/random.h>
 
 #include <err.h>
 #include <errno.h>
@@ -46,6 +48,8 @@
 #include <pwd.h>
 #include <grp.h>
 
+#include "compat.h"
+
 #define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
 
 extern char *__progname;
@@ -102,14 +106,6 @@
 	argc -= optind;
 	argv += optind;
 
-	if (Pflag) {
-		if (pledge("stdio rpath wpath cpath getpw", NULL) == -1)
-			err(1, "pledge");
-	} else {
-		if (pledge("stdio rpath cpath getpw", NULL) == -1)
-			err(1, "pledge");
-	}
-
 	if (argc < 1 && fflag == 0)
 		usage();
 
@@ -162,7 +158,8 @@
 			}
 			continue;
 		case FTS_ERR:
-			errc(1, p->fts_errno, "%s", p->fts_path);
+			errno = p->fts_errno;
+			err(1, "%s", p->fts_path);
 		case FTS_NS:
 			/*
 			 * FTS_NS: assume that if can't stat the file, it
@@ -292,7 +289,7 @@
 rm_overwrite(char *file, struct stat *sbp)
 {
 	struct stat sb, sb2;
-	struct statfs fsb;
+	struct statvfs fsb;
 	size_t bsize;
 	int fd;
 	char *buf = NULL;
@@ -319,9 +316,9 @@
 		errno = EPERM;
 		goto err;
 	}
-	if (fstatfs(fd, &fsb) == -1)
+	if (fstatvfs(fd, &fsb) == -1)
 		goto err;
-	bsize = MAXIMUM(fsb.f_iosize, 1024U);
+	bsize = MAXIMUM(fsb.f_bsize, 1024U);
 	if ((buf = malloc(bsize)) == NULL)
 		err(1, "%s: malloc", file);
 
@@ -348,7 +345,8 @@
 
 	for (; len > 0; len -= wlen) {
 		wlen = len < bsize ? len : bsize;
-		arc4random_buf(buf, wlen);
+		if (getrandom(buf, wlen, GRND_RANDOM|GRND_NONBLOCK) == -1)
+			err(1, "getrandom()");
 		if (write(fd, buf, wlen) != wlen)
 			return (0);
 	}
