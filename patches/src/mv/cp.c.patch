--- cp.c.orig	2020-06-26 10:20:13.219148879 -0400
+++ cp.c	2020-06-27 17:35:30.422526867 -0400
@@ -64,6 +64,8 @@
 #include <unistd.h>
 #include <limits.h>
 
+#include "compat.h"
+
 #define	fts_dne(_x)	(_x->fts_pointer != NULL)
 
 typedef struct {
@@ -358,8 +360,10 @@
 				if (mkdir(to.p_path,
 				    curr->fts_statp->st_mode | S_IRWXU) == -1)
 					err(1, "%s", to.p_path);
-			} else if (!S_ISDIR(to_stat.st_mode))
-				errc(1, ENOTDIR, "%s", to.p_path);
+			} else if (!S_ISDIR(to_stat.st_mode)) {
+				errno = ENOTDIR;
+				err(1, "%s", to.p_path);
+			}
 			break;
 		case S_IFBLK:
 		case S_IFCHR:
@@ -371,7 +375,8 @@
 					rval = 1;
 			break;
 		case S_IFSOCK:
-			warnc(EOPNOTSUPP, "%s", curr->fts_path);
+			errno = EOPNOTSUPP;
+			warn("%s", curr->fts_path);
 			break;
 		default:
 			if (copy_file(curr, fts_dne(curr)))
@@ -654,19 +659,5 @@
 		rval = 1;
 	}
 
-	/*
-	 * XXX
-	 * NFS doesn't support chflags; ignore errors unless there's reason
-	 * to believe we're losing bits.  (Note, this still won't be right
-	 * if the server supports flags and we were trying to *remove* flags
-	 * on a file that we copied, i.e., that we didn't create.)
-	 */
-	errno = 0;
-	if (fd >= 0 ? fchflags(fd, fs->st_flags) :
-	    chflagsat(AT_FDCWD, to.p_path, fs->st_flags, AT_SYMLINK_NOFOLLOW))
-		if (errno != EOPNOTSUPP || fs->st_flags != 0) {
-			warn("chflags: %s", to.p_path);
-			rval = 1;
-		}
 	return (rval);
 }
